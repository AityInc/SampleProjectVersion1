generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String?
  providerId         String?
  providerAccountId  String
  refreshToken       String?
  access_token       String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
  provider           String
  type               String?
  expires_at         Int?
  scope              String?
  token_type         String?
  id_token           String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  cases         Case[]
  admin         Boolean?  @default(false)
  password      String?
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Case {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  files       File[]
  Query       Query[]
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  filetype  String
  tags      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  caseId    String   @db.ObjectId
  case      Case     @relation(fields: [caseId], references: [id])
}

model Query {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  response  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  caseId    String   @db.ObjectId
  case      Case     @relation(fields: [caseId], references: [id])
}
